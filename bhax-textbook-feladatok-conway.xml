<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Conway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Hangyaszimulációk</title>
        <para>
            Írj Qt C++-ban egy hangyaszimulációs programot, a forrásaidról utólag reverse engineering jelleggel
            készíts UML osztálydiagramot is!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/10/10/myrmecologist">https://bhaxor.blog.hu/2018/10/10/myrmecologist</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Myrmecologist">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Myrmecologist</link>
        </para>
        <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/hangya.png" scale="45"/>
                </imageobject>
            </mediaobject>
        </para>
        <para>
            Ennek a programnak a célja hangyák szimulálása, amelyek "utakat" alakítanak ki, illetve azokon az utakon közlekednek. A program futása után kb. egy perccel már látható, hogy a hangyák, ha találnak egy utat, akkor próbálnak azon közlekedni. Az utatakat a halvány kékeszöld négyzetek jelentik.
        </para>            
    </section>        
    <section>
        <title>Java életjáték</title>
        <para>
            Írd meg Java-ban a John Horton Conway-féle életjátékot, 
            valósítsa meg a sikló-kilövőt!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Ignissen/pjt_prog1/blob/master/game_of_life.java">https://github.com/Ignissen/pjt_prog1/blob/master/game_of_life.java</link>               
        </para>
        <para>
            A program elején importálom a program működéséhez szükséges package-eket, például az ablakkezeléshez, illetve az egér-, és billentyűzetkezeléshez. A program egyetlen publikus osztálya a game_of_life. Ebben található a program belépési pontja (<function>main</function> függvény). Létrehozok egy <type>RenderArea</type> típusú változót, amelyet majd a game_of_life konstruktorában inicializálok. A konstruktor emellett még beállítja az ablak címét és egyéb tulajdonságait. Az <function>update</function> függvény felelős a Conway-féle életjáték szabályainak ellenőrzésére és alkalmazására. A RenderArea private/rejtett osztály felelős a rajzolásért, egér-, és billentyűzetkezelésért, ezeket implementálja. Végül a <function>main</function> függvény következik, a program belépési pontja. Létrehoz egy példányt a game_of_life osztályból, majd amíg az életjáték fut, addig ismétli a ciklusmagot. Ha az életjáték futása véget ért, a program kilép.
        </para>            
    </section>        
    <section>
        <title>Qt C++ életjáték</title>
        <para>
            Most Qt C++-ban!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Ignissen/pjt_prog1/blob/master/game_of_life.cpp">https://github.com/Ignissen/pjt_prog1/blob/master/game_of_life.cpp</link>               
        </para>
        <para>
            A feladat megoldásához SFML-t használtam. A program két osztályból és három függvényből áll. Az első osztály feladata, hogy kirajzolja a négyzetrácsos hálót, amely négyzetei jelképezik a sejteket. A következő osztály a Square osztály, amely feladata a hálóban lévő sejtek helyének, állapotának tárolása, illetve azok hálón belülre rajzolása. Az első osztályon kívüli függvény az <function>update</function> függvény, amely célja, hogy mindeg egyes sejtet megvizsgál, az életjáték szabályai alapján. Ezek a szabályok pedig, ha egy sejt él és 2 vagy 3 szomszédja van, akkor életben marad, ellenkező esetben elpusztul, ha halott és pontosan 3 szomszédja van, élő sejt lesz belőle, ellenkező esetben halott marad. A következő függvény a <function>killall</function>, amely célja, hogyha a "játékos" szerkesztő módban van, akkor megöli az összes sejtet. Ez nem szükséges bele. Tesztelés céljából került bele, de hasznos lehet, ha nem akarjuk újraindítani a programot egy másik kezdeti alakzat szimulálásáért. Az utolsó függvény a <function>main</function>, amelyben létrehozok egy 1000x1000 pixeles ablakot, majd beállítom, hogy 10 FPS legyen a felső határ megjelenítésnél. Ezután létrehozok néhány változót ,amelyek a játék működéséhez kellenek. Ezek után elérkezünk a fő ciklushoz, amely addig fut, amíg a létrehozott ablak be nem záródik valamilyen módon (erről később). A ciklusban először letörlöm a képernyőt, hogy ne az előzőnek kirajzolt képre rajzoljon rá a program. Majd a belső while ciklus megvizsgálja, hogy történt-e valamilyen esemény (jelen esetben egér és billentyű eseméynek lehetnek ezek, illetve az ablak bezárása). Ha az ablak bezáródik, illetve, ha a felhasználó megnyomja a q betűt, a program leáll. Ha szerkesztő módban bal egérgombbal kattintunk, akkor a kurzor alatt lévő halott sejt élő lesz, és fordítva. A c betű lenyomása esetén, ha szerkesztő módban vagyunk, akkor megöli az összes sejtet. Ezután következik a háló és a sejtek kirajzolása, majd az <function>update</function> függvény hívása, ha nem szerkesztő módban vagyunk, illetve minden sejtet frissíti, hogy megkapják az új állapotukat (élő/halott) kirajzoláshoz.
        </para>            
        <para>
            Az életjátékot a cambridge-i egyetem matematikusa, John Conway találta ki. A játékként való megnevezés megtévesztő lehet, ugyanis a játékos egyetlen feladata, hogy megadja a kiindulási alakzatot, majd figyeli, hogy mi jön ki a program futása során a kiindulásialakzatból.
        </para>
    </section>        
    <section>
        <title>BrainB Benchmark</title>
        <para>
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/nbatfai/esport-talent-search">https://github.com/nbatfai/esport-talent-search</link>               
        </para>
        <para>
            A program célja azt mérni, hogy mennyire vagyunk képesek figyelemmel kísérni karakterünket, illetve, ha "elveszítjük" a képernyőn, akkor milyen gyorsan találjuk meg újból. Ez főleg online játékokban fontos. Ugyanis online játékokban, például a League of Legends nevű MOBA játékban ez egy elég gyakori probléma, hogy nagyobb összecsapás esetén egyszerűen nem találjuk a képernyőn a karakterünket.
        </para>     
        <para>
            A megoldásomat Fürjes-Benke Péter segítette.
        </para>       
    </section>        

</chapter>                
