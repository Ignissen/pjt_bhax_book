<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Liskov!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Olvasónapló - Liskov</title>
        <para>
            Az objektumorientáltság egyik lefgontosabb fogalma az öröklődés. Az öröklődés azt jelenti, hogy az új osztályunk bizonyos metódusokat és mezőket "megörökli". Az új osztályunkban módosíthatjuk az osztály viselkedését, illetve adhatunk hozzá új funkcionalitást is. A polimurfizmus az a jelenség, hogy a gyerekosztályt elérhetjük a szülőosztályon keresztül. A metódustúlterhelés azt jelenti, hogy az ősosztály metódusait újra lehet implementálni az alosztálynak megfelelően. A láthatósági szintek az objektumok rejtési módzsere. A láthatóság lehet publikus, privát és védett. A publikus tagot azok, amelyek bárhonnan láthatóak. A privát tagok, amelyek csak az osztályból láthatóak. A védett tagok csak az osztályból és a gyerekosztályokból láthatóak. Az absztrakt osztályok azok az osztályok, amelyek csak deklarálják a metódusokat és mezőket, viszont a metódusokat nem implementálják, az a gyerekosztályok feladata.
        </para>
    </section>
    <section>
        <title>Liskov helyettesítés sértése</title>
        <para>
            Írjunk olyan OO, leforduló Java és C++ kódcsipetet, amely megsérti a Liskov elvet! Mutassunk rá a
            megoldásra: jobb OO tervezés.
            <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf">https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf (93-99 fólia)</link>
            (számos példa szerepel az elv megsértésére az UDPROG repóban, lásd pl. source/binom/BatfaiBarki/madarak/)
        </para>
        <para>
            Források: <link xlink:href="https://github.com/Ignissen/pjt_prog2/tree/master/liskov_sertes">https://github.com/Ignissen/pjt_prog2/tree/master/liskov_sertes</link>
        </para>
        <para>
            A Liskov helyettesítési elv kimonjda, hogy ha S altípusa T-nek, akkor minden olyan helyen ahol T-t felhasználjuk S-t is minden gond nélkül behelyettesíthetjük anélkül, hogy a programrész tulajdonságai megváltoznának.
        </para>
        <para>
            A feladat az volt, hogy írnunk kell Javaban és C++-ban olyan programokat, amelyek lefordulnak és lefutnak, viszont megsértik a Liskov elvet. Erre példa a két program. A programok szerint a pingvin is tud repülni, mivel madár. Mivel a számítógép nem tudja ismeri a madarakat, azért a Penguin típusó objektumunk is tud repülni. A programok lefordulnak és a számítógép szemszögéből hibátlanul lefutnak, viszont mi emberek tudjuk, hogy óriási szemantikai hiba van a programban, ugyanis a pingvinek röpképtelen madarak.
        </para>
        <para>
            A probléma kiküszöbölésére az egyetlen lehetséges, de nem biztos, megoldás, hogy jobban megtervezzük az osztályainkat. <link xlink:href="https://github.com/Ignissen/pjt_prog2/blob/master/liskov_sertes/liskov_betart.cpp">Ebben</link> a programban igyekeztem elhárítani az előző részletben leírt problémát. Ebben a programban a Bird osztályban létrehoztam a move_preferred metódust, amely az adott madár által preferált helyváltoztatási cselekvést írja le (ebben a példában ez repülés, úszás vagy futás lehet). Létrehoztam két osztály a röpképes és röpképtelen madarak leírására, amelyben a repülő madarakéban a move_preferred metódust override-oltam, viszont a röpképtelen madarakat leíró osztályban még nem, ugyanis, ha nem tud repülni, attól még választhatja az úszást vagy a futást is, így ezeket az aktuális madárnak megfelelően implementáltam.
        </para>
    </section>  

    <section>
        <title>Szülő-gyerek</title>
        <para>
            Írjunk Szülő-gyerek Java és C++ osztálydefiníciót, amelyben demonstrálni tudjuk, hogy az ősön
            keresztül csak az ős üzenetei küldhetőek!
            https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_1.pdf (98. fólia)
        </para>
        <para>
            Források: <link xlink:href="https://github.com/Ignissen/pjt_prog2/tree/master/liskov_sertes/szulo_gyerek">https://github.com/Ignissen/pjt_prog2/tree/master/liskov_sertes/szulo_gyerek</link>
        </para>
        <para>
            Ebben a feladatban azt kell prezentálnunk, hogy az ős osztályok objektumai csak az ős osztályok metódusait és mezőit használhatják. A források a jelenlegi formájukban nem fordulnak le sem, ugyanis a fordítók tisztában vannak a feladat alapfeltevésével. A Parent osztálynak van egy print metódusa, amely kiírja, hogy "Parent". A Child osztálynak szintén van egy print metódusa, amely azt írja ki, hogy "Child". Eddig nincs is baja a fordítónak, ez így helyes és működőképes. A Child osztálynak viszont van még egy add metódusa, amely vár két int típusú paramétert, majd visszaadja az összegüket. Mivel a main függvényben Parent* típusú objektumokat hozok létre, ezért a c objektumban nem találja az add metódust a fordító, ezért nem is fordul le.
        </para>
    </section>

    <section>
        <title>Anti OO</title>
        <para>
            A BBP algoritmussal
            a Pi hexadecimális kifejtésének a 0. pozíciótól számított 106, 107, 108 darab
            jegyét határozzuk meg C, C++, Java és C# nyelveken és vessük össze a futási időket!
            https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apas03.html#id561066
        </para>
        <para>
        </para>
        <para>
            
        </para>
    </section>

    <section>
        <title>Hello, Android!</title>
        <para>
            Élesszük fel az SMNIST for Humans projektet!
            https://gitlab.com/nbatfai/smnist/tree/master/forHumans/SMNISTforHumansExp3/app/src/main
            Apró módosításokat eszközölj benne, pl. színvilág.
        </para>
        <para>
            Megoldás: <link xlink:href="https://github.com/Ignissen/SMNIST">https://github.com/Ignissen/SMNIST</link>
            A megoldásomban jelentősen segített Racs Tamás az UDPROG Facebook csoportban található posztjával.
        </para>
        <para>
            Mivel az android studio valamiért nem szeretett volna együttműködni importálás során, ezért létrehoztam egy új projektet, majd létrehoztam a szükséges forrásfájlokat. A forrsáfájlokba bemásoltam az eredeti forrásfájlak tartalmát, majd a package-et az aktuális projectnek megfelelően módosítottam. Ezután szükség volt az AndroidManifest.xml fájl módosítására, amelyben a következő kódot helyzetem el:
            <programlisting>
                <![CDATA[
<activity android:name=".SMNISTE3Activity">
    <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
    </intent-filter>
</activity>
                ]]>
            </programlisting>
            Ezután a activity_smniste3.xml fájlban kellet módosítanom a SMNISTSurfaceView osztály elérési útvonalát. Innentől futtatható a project akár a virtuális android eszközön, akár a saját androidos mobilunkon is.
        </para>
        <para>
            Feladat volt még, hogy apró módosításokat végezzünk a programon. Én a program színein változtattam kicsit, ez az SMNISTSurfaceView osztály <function>cinit</function> metódusának elején lehetséges.
        </para>
    </section> 

    <section>
        <title>Ciklomatikus komplexitás</title>
        <para>
            Számoljuk ki valamelyik programunk függvényeinek ciklomatikus komplexitását! Lásd a fogalom
            tekintetében a https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_2.pdf (77-79
            fóliát)!
        </para>
        <para>
            
        </para>
        <para>
            A ciklomatikus komplexitás a vezérlési gráfban megtalálható független utak maximális száma. Két út független, ha mindkettőben létezik olyan pont vagy él, amelyik nem eleme a másik útnak. Alkotója Thomas McCabe, gyakran nevezik McCabe-komplexitásnak is.
            A ciklomatikus komplexitás értéke: M = E − N + 2P, ahol E a gráf éleinek száma, N a gráfban lévő csúcsok száma, P az összefüggő komponensek száma.
        </para>
        <para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/cyclomatic_complexity_polartransz.png" scale="70"/>
                </imageobject>
            </mediaobject>
            A képen látható weboldal elérhető <link xlink:href="http://www.lizard.ws/">itt</link>.
            Ebben a feladatban a módosított polártranszformációs generátor "lényeges" részét veszem alanyul. A képen látható, hogy a <function>nextGaussian</function> metódus ciklomatikus komplexitása 3. A metódus ciklomatikus komplexitását 2-re növeli a metódus legelején lévő elágazás. Ez azért van, mert az elágazás két lehetséges kimenete egymástól független végrahajtási ágban vannak. Majd tovább növeli a ciklomatikus komplexitást az elágazás else ágában található do-while ciklus 3-ra. A do-while ciklus azért növeli a komplexitást, mert a for ciklus is a vezérlés szempontjából egy elágazás, amely után a vezértlés vagy belép a ciklusba vagy pedig a ciklus után folytatódik.
        </para>
    </section>        

           
        

</chapter>                
