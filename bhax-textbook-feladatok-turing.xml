<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: 
            Ez a program egy magon végtelen ciklust futtat, viszont a top parancs alapbeállításaival 0.0%-os processzorhasználatot mutat.
            <programlisting language="C"><![CDATA[
                    #include <stdio.h>

                    int main()
                    {
                        for(;;)
                        {
                            sleep(1);
                            printf("Ez egy végtelen ciklus!\n");
                        }
                        return 0;
                    }
                ]]>
            </programlisting>
            Ez a program egy magot terhel 100%-osan.  
            <programlisting language="C"> <![CDATA[
                int main()
                {
                    while(1);
                    return 0;
                }
            ]]>
            </programlisting>
            Ez a program pedig négy magot (a számítógépem négy magos processzorral rendelkezik) terhel 100%-osan.
            <programlisting language="C">    <![CDATA[

                    #include <unistd.h>

                    int main()
                    {
                        int t1,t2,t3;
                        if(!(t1=fork()))
                        {
                            for(;;);
                        }
                        if(!(t2=fork()))
                        {
                            for(;;);
                        }
                        if(!(t3=fork()))
                        {
                            for(;;);
                        }
                        for(;;);
                    }
                ]]>

            </programlisting>   
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
            Az egy magon 0%-os processzorhasználathoz az volt az elgondolás, hogy ha a ciklusmagban "elaltatjuk" a programot, akkor nem lesz kimutatható processzorhasználat.
            Az egy mag 100%-os leterhelését egy egyszerű "üres" végtelen ciklussal próbáltam először, ami sikeresnek bizonyult. 
            A processzor összes magjának terhelését viszont már egyértelműen nem lehet egy egyetlen szálon futó programmal terhelni, ezért forkoltam három gyerek szálat, mind a háromban "üres" végtelen ciklussal, ami sikeresen terhelte a processzorom összes magját.
        </para>            
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Ez a feladat a megállási probléma bemutatására szolgál. A megállási probléma abból áll, hogy el lehet-e dönteni egy porgramról adott bemenet esetén, hogy végtelen ciklusba kerül-e. Alan Turing 1936-ban bizonyította be, hogy nem lehetséges olyan általános algoritmust írni, amely minden program-bemenet párról megmondja, hogy végtelen ciklusba kerül-e.
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása: 
            <programlisting language="C"> <![CDATA[
                #include <stdio.h>

                int main()
                {
                    int a=5,b=4;

                    printf("a=%d, b=%d\n",a,b);
                    int tmp = a;
                    a=b;
                    b=tmp;
                    printf("a=%d,b=%d\n",a,b);
                    return 0;
                }
                ]]>
            </programlisting>
        </para>
        <para>
            A megoldásomban azt a módszert alkalmaztam, amit először ismertem erre a feladatra. Ezt egykori informatika tanárom "bögrés cserének" hívta. Ezt úgy kell elképzelni, mintha a két változó egy bögre tej és egy bögre tea lenne, és úgy kell kicserélni a tartalmukat, hogy azok ne keveredjenek. A megoldás, hogy venni kell egy harmadik (segéd) bögrét, esetünkben változót, és abba beletölteni az első bögre tartalmát. Az első bögrébe beletölteni a második bögre tartalmát, és a második bögrébe beletölteni a harmadik (segéd) bögre tartalmát.
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            <link xlink:href="https://github.com/Ignissen/pjt_bevprog/blob/master/pattogas_c.c">https://github.com/Ignissen/pjt_bevprog/blob/master/pattogas_c.c</link>
        </para>
        <para>
            <link xlink:href="https://github.com/Ignissen/pjt_prog1/blob/master/pattogas_if.c">https://github.com/Ignissen/pjt_prog1/blob/master/pattogas_if.c</link>
        </para>
        <para>
            Ezt a feladatot először C++ nyelven készítettem el a Bevezetés a programozásba nevű kurzuson. Amikor atírtam a programot C-re, egyből szembetűntek a legalapvetőbb különbségek a nyelvek között. Például a standard kimenetre való írás módjának különbözősége. 
            A program tartalmaz egy n*m-es karaktermátrixot, aminek a "szélső" elemei '#' karakterrel jelöltek, hogy láthatóak legyenek a "pálya" szélei. A labda '@' karakterrel van jelölve a képernyőn. Tartalmaz egy i <type>int</type> típusú számlálót, amely a program működéséhez szükséges.
            A program main függvényében található egy végtelen while ciklus, amelynek legelején a labda koordinátáinak kiszámítátása áll. Ezután a program lemásolja a program legelején létrehozott tömböt egy másik tömbbe.
            A másolás után meghívja a draw függvényt, amely egy kétdimenziós karaktertömböt, 2 <type>int</type>-et (labda x és y koordinátája), illetve egy karaktert, amely a labdát jelölő karakter. A karaktertömb másolására azért van szükség, mert a megoldásomban a <function>draw</function> függvényben a tömb azon elemét fölülírom a labda karakterével, amely koordinátája megegyezik a labdáéval. Ennek eredményeként, ha az eredeti tömböt adnám át a függvénynek, idővel az egész "pálya" betelne labdával.
            A draw függvény hívása után a számlálót növelem eggyel, illetve várakoztatom a program végrehajtását 50 ms-al, hogy a labda mozgása szemmel követhető legyen.
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Ignissen/pjt_prog1/blob/master/szohossz.c">https://github.com/Ignissen/pjt_prog1/blob/master/szohossz.c</link>
        </para>
        <para>
             A legtöbb személyi számítógép esetében az <type>int</type> mérete 32 bit. Ez azt jelenti, hogy egy <type>int</type> típusú változó −2,147,483,648 és +2,147,483,647 közötti számokat képes tárolni. 
             Az általam tesztelt számítógépen 32 bites az <type>int</type> mérete. Ez valószínűleg a legtöbb személyi számítógépre igaz.
        </para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Ignissen/pjt_prog1/blob/master/pagerank.c">https://github.com/Ignissen/pjt_prog1/blob/master/pagerank.c</link>
        </para>
        <para>
            A PageRank egy olyan algoritmus, amellyel weboldalak relatív fontosságát lehet megállapítani. Azt adja meg, hogy véletlenszerű böngészés esetén mekkora az esélye annak, hogy az adott oldalra találunk. Alapja, hogy egy oldalon minden hivatkozás egy-egy "szavazat" a hivatkozott oldalra. Az alapján meg lehet állapítani egy oldal relatív fontosságát, hogy hány az oldalra mutató hivatkozás van a többi oldalon, illetve, hogy hány oldalra hivatkozik az adott oldal. Az algoritmusban egy jobb minőségű oldal "szavazata" erősebbnek számít, mint egy kis relatív fontosságúé. Mivel a felhasználó általában nem fogja végignézni az összes linket a weboldalon, ezért bevezettek a képletbe egy csillapító faktort.

            A megoldásomban Lovász Botond segített.
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
        <para>
            A Brun-tétel szerint az ikerprímek reciprokösszege egy meghatározható szám felé tart, amelyet a B<subscript>2</subscript> konstanssal jelölnek, amely értéke B<subscript>2</subscript>≈1,902160583104. Az ikerprím olyan két egymást követő prímszámot jelent, amelyek különbsége 2.
        </para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
            A Monty Hall probléma egy az Amerikai Egyesült Államokban sugárzott televíziós vetélkedő játékszabályai alapján jött létre. A szabály az, hogy a versenyző kiválaszt 3 ajtó közül egyet, amelyek mögött vagy kecske van (2 ajtó esetében) vagy egy autó van az ajtó mögött (1 ajtó mögött van csak autó). A játékvezető, aki tudja, melyik ajtó mögött mi található, kinyit egy ajtót, amelyet a versenyző nem választott, majd megkérdezi, hogy szándékszik-e ajtót váltani. Ezután, ha a versenyző nem váltott ajtót, akkor a játékvezető kinyitja a második nem választott ajtót. Ha a versenyző ajtót váltott, akkor az eredetileg választott ajtót nyitja ki a játékvezető.
        </para>
        <para>
            Az a probléma azért paradoxon, mert a válasz arra, hogy megéri-e váltani az ajtók között a játékvezető kérdése után, az, hogy igen, érdemes változtatni az ajtón, viszont ez a józan észnek annyira ellentmond, hogy ezt a problémát paradoxonnak minősítik.
        </para>
        <para>
            A probléma megoldása azon alapszik, hogy, maikor választunk a három ajtó közül, akkor 1/3 az esélyünk arra, hogy a választott ajtó mögött található az autó. A játékvezető először mindenképp kecskét rejtő ajtót nyit ki a játékosnak. Az eslő ajtó választásánál 2/3 az esélyünk arra, hogy kecskét választunk, ez alapján a játékvezető kénytelen a másik kecskét rejtő ajtót kinyitni. Ez alapján látható, hogy ha váltunk az első ajtó kinyitása előtt, javul az esélye annak, hogy a játékos autót nyer.
        </para>
    </section>

</chapter>                
