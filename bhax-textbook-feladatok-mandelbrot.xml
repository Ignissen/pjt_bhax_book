<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
                
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  
            <link xlink:href="https://github.com/Ignissen/pjt_prog1/blob/master/mandelbrot.cpp">https://github.com/Ignissen/pjt_prog1/blob/master/mandelbrot.cpp</link>              
        </para>
        <para>
            A program elején létrehozunk néhány változót a precompiler számára, amelyek a kimeneti kép méretét határozzák meg, illetve vizsgált tartományt a komplex számsíkon.
        </para>
        <para>
            A <function>GeneratePNG</function> függvény paraméterként megkapja a program által generált kép adatait pixelenként a tomb nevű <type> int </type> típusú N*M-es mátrixban tárolva. A függvényen belül  létrehozunk egy N*M pixeles PNG kiterjesztésű képfájlt, amelybe az egymásba ágyazott for ciklus pixelenként beletölti az adott pixelre vonatkozó adatokat, majd a for ciklus után kiírja a képfájlt lemezre "kimenet.png" néven.
        </para>
        <para>
            A <function>main</function> függvényen belül létrehozzuk az N*M-es mátrixot, amelyben tároljuk a kép pixelenkénti adatait, beállítjuk a komplex számsíkon való lépegetés lépésközét a "dx" és "dy" változóban, majd létrehozunk három <type>Komplex</type> típusú változót, amely a komplex számokat fogja tárolni a Mandelbrot-halmaz kiszámításához. Ezután belép a porgram a for ciklusba, ahol lépked a komplex számokkal a megadott tartományban a megadott lépésközzel, majd a benne lévő while ciklus meghatározza a kép megfelelő pixelének színét annak függvényében, hogy a while ciklus fejében megadott formula hány iteráció alatt lesz nagyobb vagy egyenlő, mint négy.
            Miután a for ciklus bejárta a komplex számsík megadott tartományát, meghívja a <function>GeneratePNG</function> függvényt.
        </para>
    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
                
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:   
            <link xlink:href="https://github.com/Ignissen/pjt_prog1/blob/master/mandelbrot_komplex.cpp">https://github.com/Ignissen/pjt_prog1/blob/master/mandelbrot_komplex.cpp</link>             
        </para>
        <para>
            Az előző programhoz képest itt annyi az eltérés, hogy a 
            <programlisting language="c++"><![CDATA[
struct Komplex{
    double re,im;
};
            ]]>
            </programlisting>
            helyett a c++ beépített complex osztályát használva lépegetünk a komplex számsíkon.
        </para>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
        <para>
            A biomorfok olyan alakzatok, amelyek ránézésre akár élő organizmusok is lehetnének, viszont nem muszáj természetes eredetűnek lennie az alakzatnak (magyarán, akár lehetnek számítógép által generáltak is).
        </para>
        <para>
            Ez a program nagyon hasonlít az előzőhöz, ugyanis ennek az alapja a Mandelbrot-halmaz. 
            A legjelentősebb eltérés az előző programhoz képest, hogy itt más a megadott formula a pixelek színeinek számításánál.
        </para>                        
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
            <link xlink:href="https://github.com/Ignissen/pjt_prog1/blob/master/mandelpngc_60x60_100.cu">https://github.com/Ignissen/pjt_prog1/blob/master/mandelpngc_60x60_100.cu</link>
        </para>
        <para>
            Ez a feladat az 5.1-es feladatra épül, uyganis CUDA használata esetén device kódból nem hívhatunk olyan függvényeket, osztályokat, amelyek csak a hoston érhetők el. 
        </para>
        <para>
            A <function>mandel</function> függvény előtt álló "__device__" jelzi a fordítónak, hogy az a függvény csak a videókártyáról lesz elérhető, a hostról nem. Ez a függvény tartalmazza a pixelenkénti Mandelbrot-halmaz számolását.
        </para>
        <para>
            A <function>mandelkernel </function> előtt álló __global__ jelzi a fordítónak, hogy a függvény egy kernelfüggvény, amelyet meg lehet hívni a host kódból, illetve meg tud hívni device függvényeket. Ebben a függvényben az aktuális szál meghatázozása áll, amely azért kell, hogy tudjuk, éppen melyik komplex számot kell vizsgálnia a <function>mandel</function> függvénynek, majd meghívja a <function>mandel</function> függvényt.
        </para>
        <para>
            A <function>cudamandel</function> függvény végzi a kernel meghívásához szükséges műveleteket. Például a memóriafoglalást a videókártyán, illetve a kernel hívását, majd a videókártyán tárolt adatokat a RAM-ba másolását.
        </para>
        <para>
            A <function>main</function> függvényben a számunkra lényeges sorok a kepadat nevű mátrix lefoglalása, majd a <function>cudamandel</function> meghívása, illetve a PNG képfájl létrehozása, majd lemezre írása. A többi sor a <function> main</function>-ben a futási idő mérésére szolgál.
        </para>
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
            
        <para>
            Megoldás forrása:  
        </para>

        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
            <link xlink:href="https://github.com/Ignissen/pjt_prog1/blob/master/mandel_zoom.cpp">https://github.com/Ignissen/pjt_prog1/blob/master/mandel_zoom.cpp</link>
        </para>
        <para>
            A feladat megoldásához SFML-t használtam. A feladatban a mandelbrot halmaz meghatározására az 5.2-es feladat megoldását vettem alapul.
        </para>
        <para>
            A compute függvény határozza meg minden pixel színét, ugyanazon módszerrel, mint az 5.2-es feladatban.
        </para>
        <para>
            A következő néhány függvény segédfüggvény a nagyításhoz illetve a halmaz feltérképezéséhez.
        </para>
        <para>
            A <function> main </function> függvényben létrehozom a grafikus megjelenítéshez szükséges objektumokat, változókat. A while cikluson belül először eseménykezelés található, amely azért felelős, hogy mi történjen, ha a felhasználó a képernyőre kattint, illetve ha a egér görgőjével görget. Majd meghívom a <function>compute</function> függvényt, ezután pixelenként kirajzoltatom a kiszámolt mandelbrot-halmazt.
        </para>
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
            Megoldás forrása:
            <link xlink:href="https://github.com/Ignissen/pjt_prog1/blob/master/Mandelbrot.java"> https://github.com/Ignissen/pjt_prog1/blob/master/Mandelbrot.java</link>
        </para>
        <para>
            Az osztály konstruktorában létrehozzuk a GUI-t, illetve megadjuk a paramétereit (méret, méretezhetőség), létrehozzuk a kontroll objektumokat, a gombokat, amelyekkel változtatható a vizsgált komplex szám tartomány. A <function>plotPoints</function> eljárás felelős a vizsgált tartomány bejárásáért és az alapján a halmaz elemeinek kiszámításáért. A <function>actionPerformed</function> eljárás felelős azért, hogy a felhasználói interakciót lehetővé tegye az által, hogy "megmondja", mi történjen, ha a felhasználó rákattint egy gombra.
        </para>
        <para>
            A megoldásomat Lovász Botond segítette.
        </para>
    </section>

</chapter>                
