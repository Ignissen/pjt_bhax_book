<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Schwarzenegger</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Olvasónapló - Schwarzenegger</title>
        <para>
            Az adatfolyam digitálisan kódolt összetartozó jelek sorozata. Az adatfolyamok az adattudományokhoz a Big Data-hoz és Mesterséges Intelligencia alkalmazásokhoz nagyon hasznosak.
        </para>
        <para>
            Vannak olyan programozási nyelvek, ahol az IO eleme a nyelvnek, ilyen például a Java, illetve olyanok is, ahol nem, például a C/C++. A fájlkezelés általános folyamata: <programlisting>
            <![CDATA[
adatfolyam megnyitása
amíg van adat
    írás/olvasás
adatfolyam bezárása
]]>
            </programlisting>
        </para>
        <para>
            A Java nyelv tartalmaz  egy objektum szerializációnak nevezett mechanizmust, amely a Java objektumokat bájtsorozattá alakítja. Ez a bájtsorozat az objektumról minden adatot tartalmaz.
        </para>
        <para>
            Miután a szerializált objektumot fájlba írunk, abból a fájlból újra fel lehet építeni az objektumot memóriában. Ez a folyamat a JVM implementációtól teljesen független. Ez azt jelenti, hogy valamelyik platformon szerializálhatjuk, majd egy teljesen másik platformon deszerializálhatjuk.
        </para>
    </section>
    <section> 
    	<title>FUTURE tevékenység editor</title>
    	<para>
            Javítsunk valamit a ActivityEditor.java JavaFX programon!
            <link xlink:href="https://github.com/nbatfai/future/tree/master/cs/F6">https://github.com/nbatfai/future/tree/master/cs/F6</link>
            Itt láthatjuk működésben az alapot: <link xlink:href="https://www.twitch.tv/videos/222879467">https://www.twitch.tv/videos/222879467</link>
        </para>
        <para>
            Megoldás: <link xlink:href="https://github.com/Ignissen/pjt_prog2/blob/master/schwarzenegger/future/ActivityEditor.java">https://github.com/Ignissen/pjt_prog2/blob/master/schwarzenegger/future/ActivityEditor.java</link>
        </para>
        <para> 
    		Ez a program egy JavaFX-et használó program, amely a nevéből kikövetkeztethetően egy tevékenység-kezelő program. A program fordításával különösebb probléma nincs, csak annyi, hogy openJDK8-at kell hozzá használni. OpenJDK11-gyel már nem jelenik meg rendesen a program.
    	</para>
        <para>
            A feladat leírása alapján a program tartalmaz hibákat. Az egyik hiba, amely feltűnt, hogy a tevékenység átnevezésekor az altevékenységek nem jönnek létre az új tevékenységnév alatt újratöltés alatt, azaz a fájlrendszerben nincs letárolva rendesen. Ezt az <function>editCell</function> függvényben lehet orvosolni a <type>TextFieldTreeCell</type> osztályban.
        </para>
        <para>
            <programlisting language="java">
                <![CDATA[
private void editCell() {
    if (getItem() == null) {
        return;
    }
    String oldText = getItem().toString();
    textField.setText(oldText);
    textField.setOnKeyReleased((javafx.scene.input.KeyEvent t) -> {
        if (t.getCode() == javafx.scene.input.KeyCode.ENTER) {
            String newText = textField.getText();
            java.io.File newf = new java.io.File(newText);
            java.io.File oldf = new java.io.File(oldText);
            try {
                oldf.renameTo(newf);
            } catch (Exception e) {
                System.err.println(e.getMessage());
            }
            commitEdit(newf);
        }
    });
}                
                ]]>
            </programlisting>
            Ez a javított forrás. A forráson kicsit tömörítettem, hogy kevesebb helyet foglaljon. Az eredeti forrásban szebben tagolt.
        </para>
        <para>
            A hibát az okozta, hogy átnevezésnél, csak létrehoztunk egy új fájlt, viszont az eredeti tartalmat nem mozgattuk. A tartalmat ennél a megoldásnál sem mozgatjuk, hanem a fájlt átnevezzük a <function>renameTo</function> függvény segítségével a fájlrendszerben, illetve a <function>commitEdit</function> függvényt az új fájl nevével hívjuk meg, ezzel biztosítva, hogy a programon belül is nyoma legyen az átnevezésnek.
        </para>
    </section>
    <section>
        <title>OOCWC Boost ASIO hálózatkezelése</title>
        <para>
            Mutassunk rá a scanf szerepére és használatára! https://github.com/nbatfai/robocaremulator/blob/master/justine/rcemu/src/carlexer.ll
        </para>
        <para>
            A <function>scanf</function> függvény C nyelvben a standard inputról való olvasásra használatos. Ebben a programban viszont az <function>sscanf</function> függvényt használjuk, amely egy megadott stringből olvas be. Itt a yytext változó tárolja a standard inputról olvasott adatot. Ezután a carlexer.ll fájlban megadott reguláris kifejezésekre próbálja illeszteni a yytextben található adatot. Ha talál egy mintát, maelyre illeszkedik, meghívja a megfelelő lexer által generált függvényt, amelyben az olvasott adatoknak megfelelően eltároljuk az olvasott adatokat.
        </para>
        <para>
            Egy példa:
            <programlisting language="C++" ><![CDATA[
INIT	"<init"
...
{INIT}{WS}{WORD}{WS}{INT}{WS}("c"|"g")	{
    std::sscanf(yytext, "<init %s %d %c>", name, &num, &role);
    if(num >200)
    {
        m_errnumber = 1;
        num = 200;
    }
    m_cmd = 1;
    }				

]]>
            </programlisting>
            Itt a reguláris kifejezés {INIT}{WS}{WORD}{WS}{INT}{WS}("c"|"g"), amely annyit jelent, hogy az adat úgy kezdődik, hogy "&lt;init", ezután whitespace, azaz space, tab, stb...; ezt követi egy string, amelyet követ egy egész szám, megint whitespace, majd "c" vagy "g" karakter. Ha talál a program egy erre a mintára illeszkedő stringet, akkor a <function>std::sscanf</function> függvény segítségével a megfelelő értékeket eltárolja a megfelelő változókban.
        </para>
    </section>
    <section>
        <title>SamuCam</title>
        <para>
            Mutassunk rá a webcam (pl. Androidos mobilod) kezelésére ebben a projektben:
            https://github.com/nbatfai/SamuCam
        </para>
        <para>
            A main.cpp-ből kiindulva végig lehet követni a videoStream <type>std::string</type> típusú változó "útját", amelynek utolsó "állomása" a SamuCam osztály konstruktorában van.  
            <programlisting language="c++">
                <![CDATA[ 
void SamuCam::openVideoStream()
{
  videoCapture.open ( videoStream );

  videoCapture.set ( CV_CAP_PROP_FRAME_WIDTH, width );
  videoCapture.set ( CV_CAP_PROP_FRAME_HEIGHT, height );
  videoCapture.set ( CV_CAP_PROP_FPS, 10 );
}
                ]]>
            </programlisting>
            A <function>SamuCam::openVideoStream()</function> függvényben hozzuk létre a kapcsolatot a videóforrással, amely a program esetében egy IP Kamera. Beállítjuk a felvétel szélességét, magasságát, illetve másodpercenkénti képkockaszámát.
        </para>
        <para>
            A képek "beszerzéséért" és feldolgozásáért a <function>SamuCam::run()</function> függvény felelős. A frame <type>cv::Mat</type> típusú változóban lesz tárolva a kameráról "beszerzett" kép. A <function>videoCapture.read ( frame )</function> függvényhívással "szerezhetjük be" a kamera által készített képet, amellyel utána, szabadon fogalmazva, azt csinálhatunk, amit akarunk. Ebben a programban éppen arcfelismerést hajtunk végre a képen.
        </para>
    </section>
    <section>
        <title>BrainB</title>
        <para>
            Mutassuk be a Qt slot-signal mechanizmust ebben a projektben: https://github.com/nbatfai/esporttalent-search
        </para>
        <para>
            A slot-signal mechanizmust a Qt-n belül arra használjuk, hogy a különböző objektumaink (widgetek, threadek, stb...) tudjanak egymással kommunikálni. Amikor grafikus felhasználói felületű programokat készítünk, általában jó, ha különböző objektumok tudnak egymás között kommunikálni, ha az egyikben valami változás (akár egy billentyű lenyomása) történt. A signalokat olyankor bocsátjuk ki (az <function>emit</function> függvény segítségével), amikor olyan változás történt, amelyet szeretnénk megosztani az összekapcsolt osztállyal, osztályokkal. A slotok egyszerűen C++ függvények, amelyek akkor hívódnak meg, amikor egy signalt kibacsájtunk. A signalokat és slotokat a <function>connect</function> függvénnyel kapcsolhatjuk össze.
        </para>
        <para>
            Erre van egy remek szemléltetés a Qt dokumentációjában:
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/abstract-connections.png" scale="35" />
                </imageobject>
            </mediaobject>
        </para>
    </section>
</chapter>