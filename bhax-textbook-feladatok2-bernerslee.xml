<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Olvasónapló! (Gutenberg)</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
    	<title>Java és C++ összehasonlítás</title>
    	<para>
            A Java szintaxisa a C és C++ nyelvek szintaxisára épül. Fontos megjegyezni, hogy ez csak hasonlóság és nem egyezés, tehát előfordulnak eltérések egyes nyelvi elemekben. A Java nyelv szűkebb a C++-nál, viszont szélesebb alkalmazási területet fed le a szabványos osztálykönyvtárai miatt. A C++-ban is sokféle könyvtárat tudunk kezelni, viszont itt a külső könyvtárakakat kell használnunk, míg Javaban a beépített könyvtárak is erős funckionalitással bírnak. A Java szigorúbb előírásokat tesz az egy nyelvi elemekre, de ugyanakkor a Java dinamukusabb is, mint a C. A Java kevesebb implementációt bíz az implementációra mint a C és a C++. A C++ nyelv az objektumokat, mint a memória egy összefüggő területén elhelyezkedő bájtsorozatot fogja fel. A Java programok virtuális gépen futnak, így a memóriát közvetlenül nem tudjuk elérni, hanem csak szimbolikusan, hivatkozáson keresztül. A Java megkülönbözteti a primitív típusokat és objektumokat. A C++-ban ismert automatikus destruktor-hívó mechanizmus nincsen Java-ban. A C++ programozási nyelv többparadigmás, a Java nyelv csak az objektumorientált programozást támogatja. A C-vel, C++-szal ellentétben a Java-ban a main első argumentuma nem tartalmazza a program nevét. A C és C++ nyelvek előfordítós nyelvek, míg a Java nem. A Java-ban nincs meg a #include, itt a fordítóban vannak beleépítve az include-ok. A Java-ban a boolean típus a C++-beli bool-lal ellentétben nem tartozik az egész típusok családjához. A Java nyelvben nincsenek külön objektumok, függvénymutatók, tagfüggvényre vagy osztály adattagjára mutató pointerek. Java-ban nincs lehetőségünk a felhasználói operátorok definiálására. Java-ban a statikus változók inicializálása is futási időben, az illető osztály betöltésekor történik. A C++-ban egy függvény argumentumainak adhatunk alapértelmezett értéket, ilyenkor függvényhíváskor az argumentumot kihagyhatjuk és az alapértemezett értékkel helyettesítődik. Ilyen lehetőség a Java-ban nincsen. A Java és a C++ utasításkészlete megtévesztően hasonlít. A deklarációk egy blokkon belül követhetnek nem-deklarációs utasítást sem C++-ban és Java-ban sem. A Java-ban a break utasítás alkalmas arra, hogy -a C++-szal ellentétben- többszörös mélységű ciklusból is kilépjünk, ha címkét alkalmazunk. A Java és a C++ különbözik az öröklődési mechanizmusban. A Java a C++-ból ismert háromféle hozzáférési kategórián(private, protected, public) kívül támogat még különféle ún. félnyilvános kategóriákat is. A Java-ban nincs friend deklaráció, helyette a metóduson belüli beágyazott osztályokat használunk. A Java-ban nincsen külön struktúra, helyette használjuk az osztályokat. A C++-ban létező uniók Java-ban nem léteznek. Hatókör operátor csak C++-ban van. A Java objektumhivatkozása a C++-beli mutatóval analóg. Java-ban nincsenek globális változók, konstansok vagy függvények, csak osztályokhoz és interfészekhez tartozók, amelyek az osztályok és interfészek betöltésekor inicializálódnak. Java-ban csak egyféle típuskényszerítés van. A C++ nyelvhez hasonlóan a Java-ban is van kivételkezelés. A fő elemek a Java-ban is a try blokk, catch blokk és a throw kifejezés.
        </para>
        <para> 
    		Mind a két nyelv C alapú, tehát a szintaxisuk hasonlít. Egy meghatározó különbség alkalmazás szempontjából, hogy hagyományosan a C++-ból natív kód fordul, a Java bájtkódjait virtuális gép futtatja. Ebből eredően a C++ kódja gyorsabb, így inkább ebben írnak játékokat és olyan programokat, amiknél fontos, hogy gyorsan fussanak. A C++ könnyebben tudja átvenni a C helyét, mert nem kell neki virtuális gép. Javában viszont jelentősebbek a webes alkalmazások.
    		Az is elég fontos különbség, hogy Java-nál van automatikus garbage collector (illetve leginkább csak az van), c++ -nál a programozónak kell megírnia a destruktorokat/felszabadítani a memóriát. Játékfejlesztésnél ez is elég fontos, Java-ban nem igazán írnak nagyobb teljesítményigénnyel rendelkező programokat. Java az "zabálja" a memóriát, így kisebb eszközöknél, amiknél limitált a memória, nem igazán használják, arra jobb a C++.
    		Az sem utolso szempont, hogy a Java obejtumorientalt, mig a C++ multiparadigmas nyelv.
    	</para>
    </section>
    <section>
        <title>A Python nyelv bemutatása</title>
        <para>
            35-51.oldal:
        </para>
        <para>
            A Python egy általános célú programozási nyelv. 1990-ben alkották meg ezt a rengeteg pozitív tulajdonsággal rendelkező nyelvet, amely magas szintű, dinamukus, objektumorientált és platformfüggetlen. Általában csak prototípus készítésére és tesztelésre szokták használni, azonban egyszerűbb alkalmazások is hatékonyan létrehozhatók vele. Tanulási ciklusa lenyűgözően rövid, igen hamar lehet látványos eredményeket elérni. A Python egy scriptnyelv, azonban sok csomagot és beépített eljárást tartalmaz, így komolyabb problémák megoldására és összetett alkalmazások fejlesztésere is alkalmas. A fejlesztés megkönnyítésére magas szintű típusokat is támogat, mint a listák és szótárak. A Python egy interpreteres nyelv, azaz a programkódot nem kell lefordítani, hogy tesztelni tudjuk, hanem az értelmező ahogy olvassa a programkódot, úgy hajtva végre az utasításokat. Amennyiben egy prototípus-alkalmazást szeretnénk elkészíteni, akkor a Python egy kézenfekvő megoldás lehet. A Pythont egyszerű használni, megbízható és jelentős támogatást biztosít a hibák javítására. A Pythora tekinthetünk akár valódi programozási nyelvként is, mivel jóval többet kínál, mint az általános script nyelvek vagy batch fájlok. A magas szintű adattípusok miatt a Python segítségével nagy és bonyolult problémák is leírhatóak, mégis egyszerű módon. A Python nyelvhez szorosan kapcsolódó standard Python kódkönyvtár rengeteg újrahasznosítható, teljesen Pythonban megírt modult tartalmaz, amelyek így meggyorsítják az alkalmazásfejlesztést. Léteznek modulok például fájlkezelésre, különféle rendszerhívásokra és akár felhasználói felület kialakítására is. A Python segítségével tömör, de mégis olvasható programokat készíthetünk, amelyek általában sokkal rövidebbek, mint a velük ekvivalens C, C++ vagy Java programok. Ennek okai, hogy a magas szintű adattípusok lehetővé teszik, hogy összetett kifejezéseekt írjunk le egy rövid állításban, a kódcsoportosítás egyszerű tagolással(új sor, tabulátor) történik, nincs szükség változó avgy argumentumdefiniálásra. A Python nyelv legfőbb jellemzője, hogy behúzásalapú a szintaxisa. A programban szereplő állításokat az azonos szintű behúzásokkal csoportosítjuk, nincs szükség zárójelekre vagy explicit kulcsszavakra. A nyelv további sajátossága, hogy az utasítás a sor végéig tart, tehát nincs szükség a megszokott ';' használatára. Az értelmező minden sort tokenekre bont, amelyek között tetszőleges whitespace karakter lehet. A token különböző fajtái lehet: azonosító, kulcsszó, delmiter, literál. Azonosító lehet egy változó, osztály, függvénymodul vagy egyéb objektum neve. Betűvel vagy alulvonással kezdődik, és ezeken kívül még számokat is tartalmazhat. A kis-, és nagybetűket Pythonban megkülönböztetjük. Megjegyzések elhelyezésére a # jel használható, mely a sor végéig érvényes. A Pythonban minden adatok objektumok reprezentálnak. Az adatokan végezhető műveleteket az objektum típusa határozza meg. A Pythonban nincs szükség a változók típusának explicit megadására, a rendszer futási időben automatikusan "kitalálja" a változók típusát a hozzárendelt érték alapján. A számok lehetnek egészek, lebegőpontosak és komplex számok. Az adattípusok lehetnek számok, stringek, ennesek, listák, szótárak. Az egész számok lehetnek decimálisak, oktálisak vagy hexadecimálisak. Pythonban a változók alatt az egyes objektumokra mutató referenciákat értjük. Amennyiben egy objektumra az utolsó hivatkozást is töröljük, az automatika garbage collector szabadítja fel a memóriaterületet. A nyelv támogatja a más nyelvekben megszokott if elégazást az if/elif/else kulcsszavakkal. Támogatja a különféle ciklusok kezelését is. Címkéket a label kulcsszóval helyezhetünk el a kódban, címkékhez pedig a goto paranccsal ugorhatunk. A comefrom a goto ellentéte, amikor a kód futásában elérkezünk egy label-hez, a kód a hozzá tartozó comefrom részhez ugrik. Függvényeket a def kulcsszóval definiálhatunk. A függvényekre, mint értékekre is tekinthetünk, ugyanis azok továbbadhatók más függvényeknek, illetve objektumkonstruktoroknak. A paramétereknek alapértelmezett értéket is adhatunk. A Python támogatja a klasszikus, objektumorientált fejlesztése eljáraásokat. Definiálhatunk osztályokat, amelyek példányai az objektumok. Az osztályok örökölhetnek más osztályokból is. A Python a fejlesztés megkönnyítése érdekében sok szabványos modult tartalmaz. A Python is támogatja a váratlan helyzetek kezelésére az úgynevezett kivételeket. A kivételkezelés kulcsszavai a try, except (C++, Java-s megfelelője a catch) és a raise (C++, Java-s megfelelője a throw).
        </para>
    </section>
</chapter>